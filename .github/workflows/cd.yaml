name: cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          # - os: windows-latest
          #   target: "x86_64-pc-windows-msvc"
          # - os: windows-latest
          #   target: "i686-pc-windows-msvc"
          # - os: windows-latest
          #   target: "aarch64-pc-windows-msvc"
          # - os: ubuntu-latest
          #   target: "x86_64-unknown-linux-gnu"
          # - os: ubuntu-latest
          #   target: "aarch64-unknown-linux-gnu"
          #   gcc: "gcc-aarch64-linux-gnu"
          # - os: ubuntu-latest
          #   target: "arm-unknown-linux-gnueabihf"
          #   gcc: "gcc-arm-linux-gnueabihf"
          # - os: macos-latest
          #   target: "x86_64-apple-darwin"
          # - os: macos-latest
          #   target: "aarch64-apple-darwin"
          - os: ubuntu-latest
            target: "wasm32-unknown-unknown"
            package: "litho-lsp-wasm"

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Install Rust Stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: rustfmt
    - name: Download target ${{ matrix.target }}
      run: rustup target add ${{ matrix.target }}
    - name: Install GCC ${{ matrix.gcc }}
      run: sudo apt-get install ${{ matrix.gcc }}
      if: ${{ matrix.gcc }}
    
    - name: Build Litho LSP
      run: cargo build --package litho-lsp --release --target ${{ matrix.target }}
      if: matrix.target != 'wasm32-unknown-unknown'
    
    - name: Build Litho LSP for WASM
      run: cargo build --package litho-lsp-wasm --release --target ${{ matrix.target }}
      if: matrix.target == 'wasm32-unknown-unknown'

    - name: Package Litho LSP
      run: tar -czvf "litho-lsp-beta-${{ matrix.target }}.tar.gz" "litho-lsp"
      if: runner.os != 'Windows' && matrix.target != 'wasm32-unknown-unknown'
      working-directory: "target/${{ matrix.target }}/release"

    - name: Rename Litho LSP for WASM
      run: mv "litho_lsp_wasm.wasm" "litho-lsp.wasm"
      if: matrix.target == 'wasm32-unknown-unknown'
      working-directory: "target/${{ matrix.target }}/release"

    - name: Package Litho LSP
      run: tar -czvf "litho-lsp-beta-${{ matrix.target }}.tar.gz" "litho_lsp_wasm.wasm"
      if: runner.os != 'Windows' && matrix.target != 'wasm32-unknown-unknown'
      working-directory: "target/${{ matrix.target }}/release"

    - name: Package Litho LSP for WASM
      run: tar -czvf "litho-lsp-beta-${{ matrix.target }}.tar.gz" "litho-lsp.wasm"
      if: matrix.target == 'wasm32-unknown-unknown'
      working-directory: "target/${{ matrix.target }}/release"
    
    - name: Package Litho LSP on Windows
      run: tar -czvf "litho-lsp-beta-${{ matrix.target }}.tar.gz" "litho-lsp.exe"
      if: runner.os == 'Windows'
      working-directory: "target/${{ matrix.target }}/release"
    
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.target }}
        path: "target/${{ matrix.target }}/release/litho-lsp-beta-${{ matrix.target }}.tar.gz"

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: artifacts
      - run: aws s3 cp ./artifacts/*/*.tar.gz s3://litho-downloads/litho-lsp/beta/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-central-1
